/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package techx.sopl.pr01;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

public class Pr01 {

  public static class OptionParseException extends Exception {
    public OptionParseException(String message) {
      super(message);
    }
  }

  static byte[] readInput(InputStream in) throws IOException {
    InputStreamReader stdin = new InputStreamReader(in);
    StringBuilder sb = new StringBuilder();
    char[] chars = new char[4096];
    int read = readChars(stdin, sb, chars);
    while (read > -1) {
      read = readChars(stdin, sb, chars);
    }
    return sb.toString().getBytes("UTF-8");
  }

  static int readChars(InputStreamReader stdin, StringBuilder sb, char[] chars) throws IOException {
    int read = stdin.read(chars);
    if (read > 0) {
      sb.append(chars, 0, read);
    }
    return read;
  }

  static Config parseOptions(String[] args) throws OptionParseException {
    if (args.length <= 0) {
      throw new OptionParseException(
          "expected at least one argument (the path to NFA program) got no arguments");
    } else if (args.length > 1) {
      throw new OptionParseException(
          String.format(
              "expected exactly one argument got %d args: %s", args.length, Arrays.asList(args)));
    }
    byte[] input;
    try {
      input = readInput(System.in);
    } catch (Exception e) {
      throw new OptionParseException(
          String.format("was not able to read the stardard in: %s", e.getMessage()));
    }
    return new Config(args[0], input);
  }

  static String readFile(Path path) throws IOException {
    try {
      return new String(Files.readAllBytes(path), "UTF-8");
    } catch (UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
  }

  public static int tokenizeInput(Config config, String nfaProgram) {
      // Call your stuff here
      try {
          ArrayList<Instruction> program = parseProgram(nfaProgram);
          byte[] input = config.Input();
          List<Match> matches = Thompson.tokenize(program, input);
          for(Match match: matches) {
              match.print();
          }
      } catch(Exception e) {
          System.out.println(e.getMessage());
          return 1;
      }
      
      return 0;
  }  
    
  static ArrayList<Instruction> parseProgram(String nfaProgram) throws OptionParseException {
      String[] inst = nfaProgram.split("\n");
      ArrayList<Instruction> program = new ArrayList<Instruction>();
      
      for(int i=0; i < inst.length; i++) {
          String[] instParts = inst[i].split(" ");
          if(instParts.length > 4 || instParts.length < 2) throw new OptionParseException("Instruction " + i + "is badly formatted");
          switch(instParts[1]) {
              case "CHAR":
              case "SPLIT":
                  program.add(new Instruction(instParts[1], Integer.parseInt(instParts[2]), Integer.parseInt(instParts[3])));
                  break;
              case "MATCH":
                  program.add(new Instruction(instParts[1]));
                  break;
              case "JMP":
                  program.add(new Instruction(instParts[1], Integer.parseInt(instParts[2])));
                  break;
              default:
                  throw new OptionParseException("Invalid OP Code");
          }
      }
      return program;
  }

  static int run(String[] args) {
    Config config;
    try {
      config = parseOptions(args);
    } catch (OptionParseException e) {
      System.err.println(e.getMessage());
      return 1;
    }
    String program;
    try {
      program = readFile(config.NfaProgramPath());
    } catch (IOException e) {
      System.err.printf(
          "could not read nfa program %s: %s\n", config.NfaProgramPath(), e.getMessage());
      return 2;
    }
    return tokenizeInput(config, program);
  }

  public static void main(String[] args) {
    System.exit(run(args));
  }
}
